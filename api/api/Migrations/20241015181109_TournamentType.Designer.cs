// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241015181109_TournamentType")]
    partial class TournamentType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Gokart", b =>
                {
                    b.Property<int>("GokartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GokartId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("GokartId");

                    b.ToTable("Gokarts");

                    b.HasData(
                        new
                        {
                            GokartId = 1,
                            Name = "Czarny 1"
                        },
                        new
                        {
                            GokartId = 2,
                            Name = "Czarny 2"
                        });
                });

            modelBuilder.Entity("api.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("PlayerId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            PlayerId = 1,
                            BirthDate = new DateTime(2024, 10, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Maciej",
                            SchoolId = 1,
                            Surname = "Traktor"
                        },
                        new
                        {
                            PlayerId = 2,
                            BirthDate = new DateTime(2024, 10, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Michalina",
                            SchoolId = 1,
                            Surname = "Ciągnik"
                        });
                });

            modelBuilder.Entity("api.Models.PlayerTournament", b =>
                {
                    b.Property<int>("PlayersId")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentsId")
                        .HasColumnType("integer");

                    b.HasKey("PlayersId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("PlayerTournaments");

                    b.HasData(
                        new
                        {
                            PlayersId = 1,
                            TournamentsId = 1
                        },
                        new
                        {
                            PlayersId = 2,
                            TournamentsId = 1
                        });
                });

            modelBuilder.Entity("api.Models.Queue", b =>
                {
                    b.Property<int>("QueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QueueId"));

                    b.Property<int>("GokartId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("QueuePosition")
                        .HasColumnType("integer");

                    b.Property<int>("RideStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.HasKey("QueueId");

                    b.HasIndex("GokartId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RideStatusId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Queues");
                });

            modelBuilder.Entity("api.Models.Ride", b =>
                {
                    b.Property<int>("RideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RideId"));

                    b.Property<int>("GokartId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDisqualified")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("RideNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.HasKey("RideId");

                    b.HasIndex("GokartId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("api.Models.RideStatus", b =>
                {
                    b.Property<int>("RideStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RideStatusId"));

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("RideStatusId");

                    b.ToTable("RideStatuses");

                    b.HasData(
                        new
                        {
                            RideStatusId = 1,
                            State = "Oczekuje"
                        },
                        new
                        {
                            RideStatusId = 2,
                            State = "W trakcie"
                        },
                        new
                        {
                            RideStatusId = 3,
                            State = "Zakończył"
                        });
                });

            modelBuilder.Entity("api.Models.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SchoolId"));

                    b.Property<string>("Acronym")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SchoolId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            SchoolId = 1,
                            Acronym = "ZSTIO",
                            City = "Limanowa",
                            Name = "ZSTIO"
                        });
                });

            modelBuilder.Entity("api.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TournamentId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TournamentStateId")
                        .HasColumnType("integer");

                    b.Property<int?>("TournamentTypeId")
                        .HasColumnType("integer");

                    b.HasKey("TournamentId");

                    b.HasIndex("TournamentStateId");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            TournamentId = 1,
                            EndDate = new DateTime(2024, 10, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Wyścig",
                            StartDate = new DateTime(2024, 10, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            TournamentStateId = 1
                        });
                });

            modelBuilder.Entity("api.Models.TournamentState", b =>
                {
                    b.Property<int>("TournamentStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TournamentStateId"));

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("TournamentStateId");

                    b.ToTable("TournamentStates");

                    b.HasData(
                        new
                        {
                            TournamentStateId = 1,
                            State = "Zaplanowane"
                        },
                        new
                        {
                            TournamentStateId = 2,
                            State = "W trakcie"
                        },
                        new
                        {
                            TournamentStateId = 3,
                            State = "Zakończone"
                        });
                });

            modelBuilder.Entity("api.Models.TournamentType", b =>
                {
                    b.Property<int>("TournamentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TournamentTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("TournamentTypeId");

                    b.ToTable("TournamentTypes");

                    b.HasData(
                        new
                        {
                            TournamentTypeId = 1,
                            Name = "Zapętlony"
                        },
                        new
                        {
                            TournamentTypeId = 2,
                            Name = "Nieskończony"
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Access")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Models.Player", b =>
                {
                    b.HasOne("api.Models.School", "School")
                        .WithMany("Players")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("api.Models.PlayerTournament", b =>
                {
                    b.HasOne("api.Models.Player", "Player")
                        .WithMany("PlayerTournaments")
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Tournament", "Tournament")
                        .WithMany("PlayerTournaments")
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("api.Models.Queue", b =>
                {
                    b.HasOne("api.Models.Gokart", "Gokart")
                        .WithMany("Queues")
                        .HasForeignKey("GokartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Player", "Player")
                        .WithMany("Queues")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.RideStatus", "RideStatus")
                        .WithMany("Queues")
                        .HasForeignKey("RideStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Tournament", "Tournament")
                        .WithMany("Queues")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gokart");

                    b.Navigation("Player");

                    b.Navigation("RideStatus");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("api.Models.Ride", b =>
                {
                    b.HasOne("api.Models.Gokart", "Gokart")
                        .WithMany("Rides")
                        .HasForeignKey("GokartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Player", "Player")
                        .WithMany("Rides")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Tournament", "Tournament")
                        .WithMany("Rides")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gokart");

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("api.Models.Tournament", b =>
                {
                    b.HasOne("api.Models.TournamentState", "TournamentState")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.TournamentType", "TournamentType")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentTypeId");

                    b.Navigation("TournamentState");

                    b.Navigation("TournamentType");
                });

            modelBuilder.Entity("api.Models.Gokart", b =>
                {
                    b.Navigation("Queues");

                    b.Navigation("Rides");
                });

            modelBuilder.Entity("api.Models.Player", b =>
                {
                    b.Navigation("PlayerTournaments");

                    b.Navigation("Queues");

                    b.Navigation("Rides");
                });

            modelBuilder.Entity("api.Models.RideStatus", b =>
                {
                    b.Navigation("Queues");
                });

            modelBuilder.Entity("api.Models.School", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("api.Models.Tournament", b =>
                {
                    b.Navigation("PlayerTournaments");

                    b.Navigation("Queues");

                    b.Navigation("Rides");
                });

            modelBuilder.Entity("api.Models.TournamentState", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("api.Models.TournamentType", b =>
                {
                    b.Navigation("Tournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
